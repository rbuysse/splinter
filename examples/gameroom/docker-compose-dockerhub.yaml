# Copyright 2020 Cargill Incorporated
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: "3.7"

volumes:
  cargo-registry:
  key-registry:
  acme-var:
  bubba-var:
  acme-db:
  bubba-db:

services:

    generate-key-registry:
        image: splintercommunity/splinter-cli:0.3.8
        volumes:
          - key-registry:/key_registry
          - ./key_registry:/input
        command: |
          bash -c "
            if [ ! -f /key_registry/keys.yaml ]
            then
              splinter admin keyregistry \
                -i /input/key_registry_spec.yaml \
                -d /key_registry \
                --force
            fi
          "

    db-acme:
      image: splintercommunity/gameroom-database:0.3.8
      container_name: db-acme
      restart: always
      expose:
        - 5432
      ports:
          - "5432:5432"
      environment:
        POSTGRES_USER: gameroom
        POSTGRES_PASSWORD: gameroom_example
        POSTGRES_DB: gameroom
      volumes:
        - "./database/tables:/docker-entrypoint-initdb.d"
        - "acme-db:/var/lib/postgresql/data/"

    gameroom-app-acme:
      image: splintercommunity/gameroom-app-acme:0.3.8
      container_name: gameroom-app-acme
      environment:
        - VUE_APP_BRAND=acme
      expose:
        - 80
      ports:
        - '8080:80'

    gameroomd-acme:
        image: splintercommunity/gameroomd:0.3.8
        container_name: gameroomd-acme
        volumes:
          - cargo-registry:/root/.cargo/registry
        expose:
          - 8000
        ports:
          - "8000:8000"
        depends_on:
          - splinterd-node-acme
        command: |
          bash -c "
            # we need to wait for the db to have started.
            until PGPASSWORD=gameroom_example psql -h db-acme -U gameroom -c '\q'; do
                >&2 echo \"Database is unavailable - sleeping\"
                sleep 1
            done

            # check if splinterd-node-acme is available
            while [[ $$(curl --write-out %{http_code} --silent --output /dev/null http://splinterd-node-acme:8085/status) -ne 200 ]] ; do
               >&2 echo \"SplinterD is unavailable - sleeping\"
               sleep 1
            done

            gameroomd -vv --database-url postgres://gameroom:gameroom_example@db-acme:5432/gameroom \
              -b gameroomd-acme:8000 --splinterd-url http://splinterd-node-acme:8085
          "
    splinterd-node-acme:
      image: splintercommunity/splinterd:0.3.8
      container_name: splinterd-node-acme
      expose:
        - 8080
        - 8044
        - 8945
        - 8085
      ports:
        - 8088:8085
      volumes:
        - key-registry:/key_registry_shared
        - acme-var:/var/lib/splinter
        - ./splinterd-config:/configs
        - ./node_registry:/node_registry
      entrypoint: |
        bash -c "
          # We need to wait for the generated key registry to be available
          while [ ! -f /key_registry_shared/keys.yaml ]; do \
            echo 'waiting for key registry'; \
            sleep 1; \
          done && \
          # Copy the generated key registry to its expected location
          cp -a /key_registry_shared/keys.yaml /var/lib/splinter && \
          splinter cert generate --skip && \
          splinterd -c ./configs/splinterd-node-acme.toml -vv \
              --service-endpoint 0.0.0.0:8043 \
              --network-endpoint 0.0.0.0:8044 \
              --bind 0.0.0.0:8085 \
              --insecure
        "

    db-bubba:
      image: splintercommunity/gameroom-database:0.3.8
      container_name: db-bubba
      restart: always
      expose:
        - 5432
      ports:
          - "5433:5432"
      environment:
        POSTGRES_USER: gameroom
        POSTGRES_PASSWORD: gameroom_example
        POSTGRES_DB: gameroom
      volumes:
        - "./database/tables:/docker-entrypoint-initdb.d"
        - "bubba-db:/var/lib/postgresql/data/"

    gameroom-app-bubba:
      image: splintercommunity/gameroom-app-bubba:0.3.8
      container_name: gameroom-app-bubba
      environment:
        - VUE_APP_BRAND=bubba
      expose:
        - 80
      ports:
        - '8081:80'

    gameroomd-bubba:
        image: splintercommunity/gameroomd:0.3.8
        container_name: gameroomd-bubba
        volumes:
          - cargo-registry:/root/.cargo/registry
        expose:
          - 8000
        ports:
          - "8001:8000"
        depends_on:
          - splinterd-node-bubba
        command: |
          bash -c "
            # we need to wait for the db to have started.
            until PGPASSWORD=gameroom_example psql -h db-bubba -U gameroom -c '\q'; do
                >&2 echo \"Database is unavailable - sleeping\"
                sleep 1
            done

            # check if splinterd-node-bubba is available
            while [[ $$(curl --write-out %{http_code} --silent --output /dev/null http://splinterd-node-bubba:8085/status) -ne 200 ]] ; do
               >&2 echo \"SplinterD is unavailable - sleeping\"
               sleep 1
            done

            gameroomd -vv --database-url postgres://gameroom:gameroom_example@db-bubba:5432/gameroom \
              -b gameroomd-bubba:8000 --splinterd-url http://splinterd-node-bubba:8085
          "

    splinterd-node-bubba:
      image: splintercommunity/splinterd:0.3.8
      container_name: splinterd-node-bubba
      expose:
        - 8080
        - 8044
        - 8945
        - 8085
      ports:
        - 8089:8085
      volumes:
        - key-registry:/key_registry_shared
        - ./splinterd-config:/configs
        - ./node_registry:/node_registry
        - bubba-var:/var/lib/splinter
      entrypoint: |
        bash -c "
          # We need to wait for the generated key registry to be available
          while [ ! -f /key_registry_shared/keys.yaml ]; do \
            echo 'waiting for key registry'; \
            sleep 1; \
          done && \
          # Copy the generated key registry to its expected location
          cp -a /key_registry_shared/keys.yaml /var/lib/splinter && \
          splinter cert generate --skip && \
          splinterd -c ./configs/splinterd-node-bubba.toml -vv \
              --service-endpoint 0.0.0.0:8043 \
              --network-endpoint 0.0.0.0:8044 \
              --bind 0.0.0.0:8085 \
              --insecure
        "
